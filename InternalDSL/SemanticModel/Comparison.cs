using System;

namespace InternalDSL.SemanticModel
{
    /// <summary>
    /// Used to configure the type of comparison to be performed.
    /// </summary>
    public enum ComparisonType
    {
        LessThan = -1,
        EqualTo = 0,
        GreaterThan = 1
    }

    /// <summary>
    /// Instances of this class are used to assert expectations on return
    /// values from functions under test. In the context of propositions, a
    /// comparison can be thought of as the propositional function.
    /// </summary>
    /// <typeparam name="TInput">The type of input given to the function under test</typeparam>
    /// <typeparam name="TOutput">The return type of the function under test</typeparam>
    public abstract class Comparison<TInput, TOutput>
    {
        /// <summary>
        /// Asserts whether a function under test is expected to generate the
        /// specified function value when provided with the given input sample.
        /// For instance, the input (2, 3) to an add function might result in
        /// the functionValue 5. This value is then matched against the rules
        /// encapsulated in this comparison instance.
        /// </summary>
        /// <param name="inputSample">The input generated by the test for a particular sample</param>
        /// <param name="functionValue">The output generated by the function under test</param>
        /// <returns>True if the function value is within expectations, false otherwise</returns>
        public abstract bool Matches(TInput inputSample, TOutput functionValue);
    }

    /// <summary>
    /// Used to compare the output of the function under test with the output
    /// of another function for equality only.
    /// </summary>
    /// <typeparam name="TInput">The type of input given to the function under test</typeparam>
    /// <typeparam name="TOutput">The return type of the function under test</typeparam>
    public class FunctionEqualityComparison<TInput, TOutput> : Comparison<TInput, TOutput>
    {
        protected readonly Func<TInput, TOutput> expectedFunction;

        public FunctionEqualityComparison(Func<TInput, TOutput> expectedFunction)
        {
            this.expectedFunction = expectedFunction;
        }

        public override bool Matches(TInput inputSample, TOutput functionValue)
        {
            var expected = expectedFunction(inputSample);
            if (expected == null)
            {
                return functionValue == null;
            }

            return expected.Equals(functionValue);
        }
    }

    /// <summary>
    /// Used to compare the output of the function under test with the output
    /// of another function. This class supports both equality, less than, and
    /// greater than checks.
    /// </summary>
    /// <typeparam name="TInput">The type of input given to the function under test</typeparam>
    /// <typeparam name="TOutput">The return type of the function under test</typeparam>
    public class FunctionComparison<TInput, TOutput> : FunctionEqualityComparison<TInput, TOutput> where TOutput : IComparable<TOutput>
    {
        private readonly ComparisonType _comparisonType;

        public FunctionComparison(Func<TInput, TOutput> expectedFunction, ComparisonType comparisonType) : base(expectedFunction)
        {
            _comparisonType = comparisonType;
        }

        public override bool Matches(TInput inputSample, TOutput functionValue)
        {
            var expected = expectedFunction(inputSample);
            if (functionValue != null)
            {
                return Math.Sign(functionValue.CompareTo(expected)) == (int)_comparisonType;
            }

            switch (_comparisonType)
            {
                case ComparisonType.EqualTo:
                    return expected == null;
                case ComparisonType.LessThan: //Null is only less than something that is not null
                    return expected != null;
                case ComparisonType.GreaterThan: //Null cannot be greater than anything
                default:
                    return false;
            }
        }
    }

    /// <summary>
    /// Used to compare a function output with an invariant value for equality only.
    /// </summary>
    /// <typeparam name="TOutput">The return type of the function under test</typeparam>
    public class LiteralEqualityComparison<TOutput> : FunctionEqualityComparison<object, TOutput>
    {
        public LiteralEqualityComparison(TOutput expected) : base(i => expected)
        {
        }
    }

    /// <summary>
    /// Used to compare a function output with an invariant value. This class
    /// supports both equality, less than, and greater than checks.
    /// </summary>
    /// <typeparam name="TOutput">The return type of the function under test</typeparam>
    public class LiteralComparison<TOutput> : FunctionComparison<object, TOutput> where TOutput : IComparable<TOutput>
    {
        private readonly ComparisonType _comparisonType;

        public LiteralComparison(TOutput expected, ComparisonType comparisonType) : base(i => expected, comparisonType)
        {
        }
    }
}
